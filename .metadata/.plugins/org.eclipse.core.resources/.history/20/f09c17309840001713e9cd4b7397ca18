import java.io.*;
import java.util.*;
import java.lang.*;


public class HuffmanEncoding {

	private Map<Character, Integer> frequency;
	private ArrayList<Node> listOfNodes;
	private PriorityQueue<Node> priorityQueue;
	private Node root;

	
	public HuffmanEncoding(BufferedReader brFile) throws IOException
	{
		frequency = new HashMap<Character, Integer>();
		listOfNodes = new ArrayList<Node>();
		priorityQueue = new PriorityQueue<Node>();
		countCharacters(brFile);
		listOfNodes();
		createTree();
	}
	
	
	/**
	 * @return nothing, just fills in the frequency matrix
	 * @throws IOException 
	 */
	public void countCharacters(BufferedReader brFile) throws IOException
	{
		while(brFile.ready())
		{
			Character temp = new Character((char)brFile.read());
			
			//check if ints are initialized
			if(frequency.get(temp) == null)
				frequency.put(temp, 1);
				
			else
				frequency.put(temp, frequency.get(temp) + 1); 
		}
	}
	
	
	public void listOfNodes()
	{
		for(Character key: frequency.keySet())
		{
			listOfNodes.add(new Node(key,frequency.get(key)));
		}
	}

	public void createTree()
	{
		Node small1, small2;
		
		//created a PQ 
		for(Node temp:listOfNodes)
		{
			priorityQueue.add(temp);
		}
		
		//create the Huffman tree
		
		while(!priorityQueue.isEmpty())
		{
			small1 = priorityQueue.peek();
			priorityQueue.remove();
			small2 = priorityQueue.peek();
			priorityQueue.remove();

			root = new Node(small1.getFrequency() + small2.getFrequency());
			
			
		}
			
			
			root = new Node (null, small2.getCounter() + small1.getCounter);
			
		}
	}
	
	/**
	 * @return contents of hashset; # of occurrences of a char
	 */
	public String toString()
	{
		return frequency.toString();
	}
}
